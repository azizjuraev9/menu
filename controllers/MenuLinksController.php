<?php

namespace juraev\menu\controllers;

use juraev\menu\models\MenuLinksLang;
use app\widgets\new_layout\SecondaryMenu;
use Yii;
use juraev\menu\models\MenuLinks;
use juraev\menu\models\MenuLinksSearch;
use juraev\menu\models\Menu;
use yii\filters\VerbFilter;

/**
 * MenuLinksController implements the CRUD actions for MenuLinks model.
 */
class MenuLinksController extends LangC
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }


    public function init(){
        $this->model_class = MenuLinks::className();
        $this->search_model_class = MenuLinksSearch::className();
        $this->lang_model_class = MenuLinksLang::className();
        $this->create_redirect = ['menu/new'];
        $this->update_redirect = ['menu/new'];
        $this->delete_redirect = ['menu/new'];
    }

    public function actionCreate(){
        $model = new MenuLinks();

        if(Yii::$app->request->get("menu_id"))
            $model->menu_id = Yii::$app->request->get("menu_id");


        if(Yii::$app->request->get("parent_id")){
            $model->parent_id = (int)Yii::$app->request->get("parent_id");
            if($parent = MenuLinks::findOne($model->parent_id)){
                $model->menu_id = $parent->menu_id;
            }
        }

        /**
         * @var MenuLinksLang[] $langModels
         */
        $langModels = [];
        $langs = $model->getLangList();
        array_walk($langs,function (&$item,$key) use (&$langModels){
            $langModels[$key] = new MenuLinksLang();
            $langModels[$key]->lang = $key;
        });


        if(
            $model->load(Yii::$app->request->post())
            && MenuLinks::loadMultiple($langModels,Yii::$app->request->post())
            && $model->validate()
            && MenuLinks::validateMultiple($langModels)
        ){
            $model->save(false);
            foreach ($langModels as $langModel){
                $langModel->main_id = $model->id;
                $langModel->save(false);
            }
            return $this->redirect(['/menu']);
        }

        return $this->render('create2',[
            'model' => $model,
            'langModels' => $langModels,
            'langs' => $langs,
            'links' => MenuLinks::findL()->where(['menu_id'=>$model->menu_id])->all(),
        ]);

    }


    public function actionUpdate($id, $lang){
        $model = MenuLinks::findOne($id);
        $trs = MenuLinksLang::findAll(['main_id'=>$id]);
        if(!$model &&  !$trs)
            return $this->redirect(['/menu']);
        /**
         * @var MenuLinksLang[] $langModels
         */
        $langModels = [];
        $langs = $model->getLangList();

        foreach ($trs as $lang)
            $langModels[$lang->lang] = $lang;
        foreach ($langs as $k=>$lang){
            if(!isset($langModels[$k])){
                $langModels[$k] = new MenuLinksLang();
                $langModels[$k]->main_id = $id;
                $langModels[$k]->lang    = $k;
            }

        }

        if(
            $model->load(Yii::$app->request->post())
            && MenuLinks::loadMultiple($langModels,Yii::$app->request->post())
            && $model->validate()
            && MenuLinks::validateMultiple($langModels)
        ){
            $model->save(false);
            foreach ($langModels as $langModel){
                $langModel->main_id = $model->id;
                $langModel->save(false);
            }
            return $this->redirect(['/menu']);
        }

        return $this->render('update2',[
            'model' => $model,
            'langModels' => $langModels,
            'langs' => $langs,
            'links' => MenuLinks::findL()->where(['menu_id'=>$model->menu_id])->all(),
        ]);

    }

//    protected function create_after_model_cr($model)
//    {
//        if(Yii::$app->request->get("menu_id"))
//            $model->menu_id = Yii::$app->request->get("menu_id");
//
//        if(Yii::$app->request->get("parent_id")){
//            $model->parent_id = (int)Yii::$app->request->get("parent_id");
//            if($parent = MenuLinks::findOne($model->parent_id)){
//                $model->menu_id = $parent->menu_id;
//            }
//        }
//
//        return parent::create_after_model_cr($model); // TODO: Change the autogenerated stub
//    }

    public function actionGetlinks($id,$self_id){
        $links = MenuLinks::findL()->where(['menu_id' => $id])->andWhere(['!=','t.id',$self_id])->all();
        $out = '<option value="" selected>- Choose a Parent Link -</option>';
        foreach($links as $link){
            $out.= '<option value="'.$link->id.'">';
            $out .= $link->name;
            $out .= '</option>';
        }
        return $out;
    }

}
